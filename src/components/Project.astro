---
import Image from 'astro/components/Image.astro';

interface Props {
    title: string;
    description: string;
    date: string;
    img: string;
    href: string;
    hrefTryOut: string;
}

const { title, description, date, img, href, hrefTryOut } = Astro.props;
const images = import.meta.glob('/public/images/*/*.avif');
const imageUrls = Object.keys(images).map((imagePath) => imagePath.replace('/public', ''));
const filteredImageUrls = imageUrls.filter(url => url.startsWith(`/images/${title}/`));
---

<button class="grid-element" id={title} style={`grid-area: ${title}`}>
    <div class="inset">
        <Image src={img} alt={img} class={'hidden'} id={`button-img-${title}`} width="600" height="400" />
        <span>
            <p style="color: #ebebeb;">{title}</p>
            <p style="color: rgba(204, 204, 204, 0.75);">{date}</p>
        </span>
    </div>
    <a class="link" href={href}>
        View Production <img src="/images/Icons/arrow.svg" alt="arrow" width="16px" height="16px" loading="lazy" />
    </a>
</button>
<dialog id={`dialog-${title}`} class="dialog" data-current-index="0">
    <div>
        <button class="closeIcon" aria-label="Close dialog" onclick="() => handleDialogClose">âœ•</button>
        <div class="images">
            <button class="prev-button">&lt;</button>
            {filteredImageUrls.map((url, index) => (
                <img src={url} alt={url} loading="lazy" class={index === 0 ? 'fade-in' : 'fade-out'} style={index === 0 ? 'display: block;' : 'display: none;'} />
            ))}
            <button class="next-button">&gt;</button>
        </div>

        <h1>{title}</h1>
        <p>{description}</p>
        <br>
        <div class="dialog-buttons">
            <a class="link" href={href}>
                View Production
                <img src="/images/Icons/arrow.svg" alt="arrow" width="16px" height="16px" loading="lazy" />
            </a>
            {hrefTryOut !== '' ? <a class="link" href={hrefTryOut}>Try out <img src="/images/Icons/arrow.svg" alt="arrow" width="16px" height="16px" loading="lazy" /></a> : ''}
        </div>
    </div>
</dialog>

<script>
    const gridElements = document.querySelectorAll('.grid-element');
    gridElements.forEach(element => {
        element.addEventListener('click', (e) => {
            if(e.target instanceof HTMLAnchorElement) return;

            const target = e.currentTarget as HTMLElement;
            const dialog = document.getElementById(`dialog-${target.id}`) as HTMLDialogElement;
            const images = dialog.querySelectorAll('.images img') as NodeListOf<HTMLImageElement>;

            images.forEach((img, i) => {
                img.style.display = i === 0 ? 'block' : 'none';
            });

            dialog.dataset.currentIndex = '0';
            dialog.showModal();
            
            const handleDialogClose = (e: Event) => {
                if (e.target === dialog || e.target === dialog.querySelector('.closeIcon')) {
                    dialog.classList.add('closing');
                    dialog.animate([
                        { transform: 'translate3d(0, 0, 0)', opacity: 1 },
                        { transform: 'translate3d(0, 100%, 0)', opacity: 0 }
                    ], 200).finished.then(() => {
                        dialog.close();
                        dialog.classList.remove('closing');
                    });
                }
            };

            document.body.addEventListener('click', handleDialogClose);

            if (images.length <= 1) return;

            const prevButton = dialog.querySelector('.prev-button') as HTMLButtonElement;
            const nextButton = dialog.querySelector('.next-button') as HTMLButtonElement;

            prevButton.style.display = 'block';
            nextButton.style.display = 'block';

            let isAllowed = true;

            const updateImages = (newIndex: number) => {
                const currentIndex = parseInt(dialog.dataset.currentIndex || '0');
                isAllowed = false;
                images[currentIndex].animate([
                    { opacity: 1 },
                    { opacity: 0 }
                ], 200).finished.then(() => {
                    images[currentIndex].style.display = 'none';
                    images[newIndex].style.display = 'block';
                    images[newIndex].animate([
                        { opacity: 0 },
                        { opacity: 1 }
                    ], 200).finished.then(() => {
                        dialog.dataset.currentIndex = newIndex.toString();
                        isAllowed = true;
                    });
                });
            }

            const handlePrevClick = () => {
                if (!isAllowed) return;
                const currentIndex = parseInt(dialog.dataset.currentIndex || '0');
                const newIndex = (currentIndex > 0) ? currentIndex - 1 : images.length - 1;
                updateImages(newIndex);
            };

            const handleNextClick = () => {
                if (!isAllowed) return;
                const currentIndex = parseInt(dialog.dataset.currentIndex || '0');
                const newIndex = (currentIndex < images.length - 1) ? currentIndex + 1 : 0;
                updateImages(newIndex);
            };

            prevButton.addEventListener('click', handlePrevClick);
            nextButton.addEventListener('click', handleNextClick);
            document.addEventListener('keydown', (e) => {
                if (e.key === 'ArrowLeft') handlePrevClick();
                if (e.key === 'ArrowRight') handleNextClick();
            });
        });
    });
</script>

<style>
    .images {
        position: relative;
        width: 100%;
        height: 35vh;
        object-fit: cover;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: row;
        overflow: hidden;
        margin-top: 1vh;
        @media screen and (max-width: 600px) {
            margin-bottom: 3vh;
            padding: 7vh 0;
        }
    }
    .images > img {
        border-radius: 1rem;
        display: none;
        max-width: 100%;
        max-height: 100%;
        height: 35vh;
        object-fit: cover;
        /* box-shadow: 0px 0px 12px 6px rgba(0, 0, 0, 0.5); */
    }
    @keyframes transformIn {
        from {
            transform: translate3d(0, 100%, 0);
            opacity: 0;
        }
        to {
            transform: translate3d(0, 0, 0);
            opacity: 1;
        }
    }
    @keyframes backdropAppear {
        from {
            opacity: 0;
            filter: blur(0px);
        }
        to {
            opacity: 1;
            filter: blur(10px);
        }
    }
    @keyframes backdropDisappear {
        from {
            opacity: 1;
            filter: blur(10px);
        }
        to {
            opacity: 0;
            filter: blur(0px);
        }
    }
    .link {
        font-size: 30px;
        background-color: rgba(28, 28, 28, 0.5);
        border-radius: 1rem;
        color: white;
        text-decoration: none;
        text-align: center;
        width: 100%;
        padding: 0.7rem 0;
        transition: background-color ease-in-out 0.2s;
        &:hover {
            background-color: rgba(28, 28, 28, 0.75);
        }
        & > img {
            margin-left: 0.5rem;
        }
        @media (max-width: 600px) {
            font-size: 20px;
        }
    }
    dialog {
        color: white;
        text-align: center;
        padding: 0;
        margin: 0;
        border: none;
        background: transparent;
        align-content: center;
        width: 100%;
        height: 100%;
        max-width: none;
        max-height: none;
        overflow: hidden;
        & h1 {
            margin: 0.5rem;
            font-size: 64px;
            @media (max-width: 600px) {
                font-size: 44px;
            }
        }
        & p {
            max-width: 90%;
            margin-bottom: 6vh;
        }
        & > div {
            margin-inline: auto;
            width: 80%;
            max-width: 1200px;
            background-color: rgba(0, 0, 0, 0.7);
            border: 3px solid rgba(20, 20, 20, 0.5);
            padding: 1.5rem;
            border-radius: 1.5rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 1rem;
            /* box-shadow: inset 0px 0px 15px 0px rgba(72, 72, 72, 0.5); */
            position: relative;
            & > .closeIcon {
                display: none;
            }
            &::before {
                content: "";
                z-index: -10;
                position: absolute;
                top: 0;
                right: 0;
                bottom: 0;
                left: 0;
                opacity: 0.4;
                background: linear-gradient(45deg, #e81cff 0%, #40c9ff 100%);
                transform: scale(1.01);
                filter: blur(20px);
                transition: opacity 0.3s;
                border-radius: inherit;
            }
            @media (max-width: 600px) {
                width: calc(100% - 2rem - 6px);
                height: calc(100% - 2rem - 6px);
                border-radius: 0;
                padding: 1rem;
                gap: 0;
                & > .closeIcon {
                    display: block;
                    position: absolute;
                    border: none;
                    top: 1rem;
                    right: 1rem;
                    font-size: 2rem;
                    color: white;
                    background-color: transparent;
                    cursor: pointer;
                    z-index: 10;
                }
            }
        }
        &::backdrop {
            background-color: rgba(0, 0, 0, 0.75);
            backdrop-filter: blur(10px);
            animation: backdropAppear 0.3s;
        }
    }
    dialog.closing::backdrop {
        animation: backdropDisappear 0.3s;
    }
    dialog[open] {
        animation: transformIn 0.3s;
    }
    body:has(dialog[open]) {
        overflow: hidden;
    }
    .dialog-buttons {
        display: flex;
        width: 100%;
        flex-direction: row;
        gap: 1rem;
        position: absolute;
        bottom: 2rem;
        width: 95%;
        @media (max-width: 600px) {
            gap: 0.5rem;
            flex-direction: column;
            width: 90%;
        }
    }
    .next-button, .prev-button {
        user-select: none;
        position: absolute;
        border-radius: 100rem;
        font-size: x-large;
        color: white;
        text-decoration: none;
        text-align: center;
        width: 3rem;
        height: 3rem;
        cursor: pointer;
        border: none;
        background-color: rgba(32, 32, 32, 0.6);
        box-shadow: inset 0px 0px 6px 0px rgba(72, 72, 72, 0.5);
        backdrop-filter: blur(7px);
        z-index: 10;
        @media (max-width: 600px) {
            font-size: x-large;
            width: 40%;
            bottom: 0;
        }
    }
    .next-button {
        display: none;
        right: 1vw;
    }
    .prev-button {
        display: none;
        left: 1vw;
    }
    p {
        font-size: 26px;
        color: white;
        text-align: center;
        margin: 0;
        @media (max-width: 600px) {
            font-size: 20px;
        }
    }
    .inset {
        width: 100%;
        height: 22rem;
        box-shadow: 0px 0px 12px 6px rgba(0, 0, 0, 0.5);
        background: linear-gradient(0deg, rgba(0, 0, 0, 0.5), transparent);
        position: relative;
        border-radius: 1rem;
        @media (max-width: 600px) {
            height: 224px;
        }
    }
    span {
        display: flex;
        align-items: center;
        justify-content: space-between;
        position: absolute;
        width: -webkit-fill-available;
        width: -moz-available;
        bottom: 1rem;
        margin: 0 1rem;
    }
    .grid-element {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        border: 3px solid rgba(20, 20, 20, 0.5);
        border-radius: 1.5rem;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        padding: 0.7rem;
        gap: 1vh;
        font-family: inherit;
        background: transparent;
        backdrop-filter: blur(7px);
        cursor: pointer;
        @media (max-width: 600px) {
            padding: 0.5rem;
            height: fit-content;
        }
    }
    .grid-element::before {
        content: "";
        z-index: -10;
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        opacity: 0;
        background: linear-gradient(45deg, #e81cff 0%, #40c9ff 100%);
        transform: scale(1.01);
        filter: blur(20px);
        transition: opacity 0.3s;
        border-radius: inherit;
    }
    .grid-element:hover::before {
        opacity: 0.4;
    }
    /* .grid-element:hover {
        background: linear-gradient(-45deg, rgba(232, 28, 255, 0.2) 0%, rgba(64, 201, 255, 0.2) 100%);
    } */
    .inset > img {
        position: relative;
        width: inherit;
        height: inherit;
        object-fit: cover;
        border-radius: 1rem;
        filter: blur(1px);
        clip-path: border-box;
        z-index: -1;
    }
</style>